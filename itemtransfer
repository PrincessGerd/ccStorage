
itemtransfer = {}
itemtransfer.__index = itemtransfer

function init(ledger)
    local self = setmetatable({}, itemtransfer)
    self.ledger_internal = ledger
    assert(self.ledger_internal ~= nil, "ledger must be provided")
    return self
end

function itemtransfer:lookup(itemName, qty)
    local item =  self.ledger_internal:getItemData(itemName)
    if (qty == nil) then qty = 0 end
    if (item.slots ~= {}) and (item.count < qty) then
        return item.count
    end
    return -1
end


function itemtransfer:deposit(itemName, qty, itemDamage, fromChest)
    --print(itemName .. "|" .. qty .. "|" .. itemDamage .. "|" .. fromChest)
    local item =  self.ledger_internal:getItemData(itemName)
    local remaining = qty
    local depositedTotal = 0
    
    -- first try existing slots
    for _, slot in ipairs(item.slots) do
        if remaining <= 0 then break end
        if slot.damage == itemDamage and slot.count < item.maxCount then
            local space = item.maxCount - slot.count
            local toDeposit = math.min(remaining, space)
            
            local deposited = peripheral.call(slot.chest, "pullItems", fromChest, 1, toDeposit, slot.index)
            if deposited > 0 then
                self.ledger_internal:updateItemInDatabase(itemName, itemDamage, deposited, slot.chest, slot.index, "DEPOSIT")
                remaining = remaining - deposited
                depositedTotal = depositedTotal + deposited
            end
        end
    end
    
    -- if not then use free slots
    if remaining > 0 then
        local freeSlots = self.ledger_internal:getFreeSlots()
        local neededSlots = math.ceil(remaining / item.maxCount)
        for i = 1, math.min(neededSlots, #freeSlots.slots) do
            if remaining <= 0 then break end
            
            local slot = freeSlots.slots[i]
            local toDeposit = math.min(remaining, item.maxCount)
            
            local deposited = peripheral.call(slot.chest, "pullItems", fromChest, 1, toDeposit, slot.index)
            if deposited > 0 then
                self.ledger_internal:updateItemInDatabase(itemName, itemDamage, deposited, slot.chest, slot.index, "DEPOSIT")
                remaining = remaining - deposited
                depositedTotal = depositedTotal + deposited
                table.remove(freeSlots.slots, i)
            end
        end
        self.ledger_internal:setFreeSlots(freeSlots)
    end
    return depositedTotal
end

function itemtransfer:fetch(itemName, qty, itemDamage, toChest)
    local item =  self.ledger_internal:getItemData(itemName)
    local remaining = qty
    local fetchedTotal = 0
    
    -- try slots with matching damage first
    -- not realy useful, but might need to find by damage sometime
    for i = #item.slots, 1, -1 do
        local slot = item.slots[i]
        if remaining <= 0 then break end
        if (not itemDamage or slot.damage == itemDamage) then
            local toFetch = math.min(remaining, slot.count)
            local fetched = peripheral.call(slot.chest, "pushItems", toChest, slot.index, toFetch, 1)
            
            if fetched > 0 then
                self.ledger_internal:updateItemInDatabase(itemName, slot.damage, -fetched, slot.chest, slot.index, "WITHDRAWAL")
                remaining = remaining - fetched
                fetchedTotal = fetchedTotal + fetched
            end
        end
    end
    
    return fetchedTotal
end