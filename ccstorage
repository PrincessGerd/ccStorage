local function loadAPI(name, pastebinId)
    if not fs.exists(name) then
        shell.run("pastebin get "..pastebinId.." "..name)
    end
    if not os.loadAPI(name) then
        error("Failed to load "..name.." API")
    end
end

--local event = require("event")
--local utils = require("utils")
--local ledger = require("ledger")
--local itemtransfer = require("itemtransfer")

loadAPI("event", "UKPy4iiE")
loadAPI("utils", "dyvydHtK")
if not os.loadAPI("ledger") then error("Failed to load ledger API") end
if not os.loadAPI("itemtransfer") then error("Failed to load itemtransfer API") end

-- local variables
local LOCAL_DB_PATH = "db/storage_"
local LEDGER_DB_PATH = "db/ledger.json"
local LOCAL_MODEM_SIDE = "right"
local TURTLE_ID = 21
local CONTROLER_CHANNEL = 666

local OPPERATIONAL = 0
local DB_CORRUPTION_FAULT = -1          -- item slot indexing is corrupted
local TRANSFER_FAULTY_ID_DETECTED = -2  -- gven item id is not the actual id
local TRANSFER_QTY_MISMATCH = -3        -- less severe version of DB_CORRUPTION_FAULT
local REGISTER_SELECT_FAULT = -4        -- unused / depricated
local TRANSFER_EMPTY_SLOT_GIVEN = -5    -- no item in input chest

local internal_state = {
    flag = 0,
    register = nil,
    lastTransaction = {},
    storage = {
        top = nil,   
        bottom = nil
    },
    ra = nil,           -- return address
    workerId = "..."    -- invalid address as default
}

-- helper to initialize storage systems
local function initStorage(register)
    return itemtransfer.init(ledger.init(LOCAL_DB_PATH..register..".json", LEDGER_DB_PATH))
end

-- select which storage to use
local function getActiveStorage()
    if internal_state.register == "top" then
        return internal_state.storage.top
    end
    return internal_state.storage.bottom
end

-- the workerId is a temporary(prob gonn be permanent) fix. 
-- since top and bot is seperate networks. the turtle has a seperate id on each
local function selectRegister(reg)
    if(reg == "top") then
        internal_state.register = "top"
        internal_state.workerId = "turtle_"..TURTLE_ID 
    elseif(reg == "bottom") then
        internal_state.register = "bottom"
        internal_state.workerId = "turtle_"..(TURTLE_ID + 1)
    end
    return internal_state.register
end

-- Initialize the system
local function init(register, db_path, ledger_path, return_address)
    internal_state.flag = OPPERATIONAL
    internal_state.register = register
    internal_state.storage.top = initStorage("top")
    internal_state.storage.bottom = initStorage("bottom")
    internal_state.workerId = "turtle_"..TURTLE_ID
    print("initialised: " .. internal_state.workerId)
end

-- works with qty range 0 -> 64
local function safe_fetch(itemName, qty, itemDamag)
    local storage = getActiveStorage()
    local ret_len = storage:fetch(itemName, qty, itemDamage, internal_state.workerId)
    
    if ret_len ~= qty then
        internal_state.flag = TRANSFER_QTY_MISMATCH
        print("TRANSFER_QTY_MISMATCH")
        return 0
    end
    local item = turtle.getItemDetail(1)
    if(item.name ~= itemName) then
        internal_state.flag = DB_CORRUPTION_FAULT
        print("DB_CORRUPTION_FAULT")
        return ret_len
    end
    return ret_len
end

-- works with qty range 0 -> 64
local function safe_deposit(itemName, qty, itemDamage)
    local item = turtle.getItemDetail(1)
    if(item == nil) then internal_state.flag = TRANSFER_EMPTY_SLOT_GIVEN; return 0 end 
    if( item.name ~= itemName or item.damage ~= itemDamage) then
        internal_state.flag = TRANSFER_FAULTY_ID_DETECTED
        -- add return for item
        print("TRANSFER_FAULTY_ID_DETECTED ")
        return  0
    end
    local storage = getActiveStorage()
    local deposited_total = storage:deposit(itemName, qty, itemDamage, internal_state.workerId)
    
    if(deposited_total ~= qty) then
        internal_state.flag = TRANSFER_QTY_MISMATCH
            print("TRANSFER_QTY_MISMATCH ")
        return deposited_total
    end
    return deposited_total
end

-- works with qty range 0 -> STORAGE_SIZE
local function deposit_with_validation(itemName, qty, itemDamage)
    local deposited = 0
    local cur_qty = 64 -- assume stacksize 64
    local cur_ret = 0
    while deposited < qty do
        if(not turtle.suck()) then if(not turtle.suck())then print("suck failed"); break end end --try twice before exiting
        cur_ret = safe_deposit(itemName, cur_qty, itemDamage, internal_state.workerId)
        if(cur_ret < 0 ) then break end
        if (cur_ret < cur_qty) then cur_qty = cur_ret end
        deposited = deposited  + cur_ret
    end
    return deposited
end

-- works with qty range 0 -> STORAGE_SIZE
local function fetch_with_validation(itemName, qty, itemDamage)
    local fetched = 0
    local cur_qty = 64 -- assume stacksize 64
    local cur_ret = 0
    while fetched < qty do
        cur_ret = safe_fetch(itemName, cur_qty, itemDamage, internal_state.workerId)
        if(cur_ret < 0 ) then break end
        if(not turtle.drop()) then if(not turtle.drop())then break end end --try twice before exiting
        if (cur_ret < cur_qty) then cur_qty = cur_ret end
        fetched = fetched  + cur_ret
    end
    print("deposit succsess")
    return fetched
end

-- modems
local LOCAL_CHANNEL= 666--math.random()
local PING_LIMIT = 10
modem =  peripheral.wrap(LOCAL_MODEM_SIDE) or error("No modem found")
modem.open(LOCAL_CHANNEL)


init("top", LOCAL_DB_PATH, LEDGER_DB_PATH, "minecraft:ironchest_iron_25")

-- message handles 
local messageHander ={
    ["depositItem"] = function(replyChannel, message)
        local parts = utils.getSplits(message, "|")
        local deposited = deposit_with_validation(parts[2], tonumber(parts[3]), tonumber(parts[4]))
        return string.format("depositResult|%s|%d|%d", parts[2], deposited, tonumber(parts[3]))
    end,
    
    ["fetchItem"] = function(replyChannel, message)
        local parts = utils.getSplits(message, "|")
        local fetched = fetch_with_validation(parts[2], tonumber(parts[3]), tonumber(parts[4]))
        return string.format("fetchResult|%s|%d|", parts[2], fetched)
    end,

    ["selectStorage"] = function(replyChannel, message)
        local parts = utils.getSplits(message, "|")
        local selection = selectRegister(parts[2])
        return string.format("selectRegister|%s|", parts[2])
    end,

    ["lookup"]= function(replyChannel, message)
        local parts = utils.getSplits(message, "|")
        local storage = getActiveStorage()
        local count = storage:lookup(parts[2], tonumber(parts[3]) or 0)
        return string.format("lookup|%s|%d|", parts[2], count)
    end,

    ["getLastTransaction"]= function(replyChannel, message)
        local storage = getActiveStorage()
        local lt = storage.ledger_internal:getLastTransaction()
        print(lt.item)
        local ret_str =  "" 
        if ((lt ~= nil) and (lt ~= {})) then
           ret_str = string.format("getLastTransaction|%s|%s|%s|%d", lt.source,lt.destination, lt.item,lt.quantity)
        end
        return ret_str
    end
}


function handleMessages(side,channel,replyChannel,message)
    print(replyChannel.." : "..message)
    local messageType=utils.split(message,"|",1)
    print(messageType)
    print(message)
    if messageHander[messageType]==nil then return end
    local returnMessage=messageHander[messageType](replyChannel,message)
    event.handleCCEvents(0.10)
    if returnMessage==nil then
        print("unkwown request : " .. messageType) 
        return 
    end
    print(replyChannel .. " : " .. returnMessage)
    modem.transmit(replyChannel,LOCAL_CHANNEL,returnMessage)
end
event.addHandler("modem_message",handleMessages)

-- Main system loop



function mainloop()
    --local msg = "ready|storage|turtle_"..TURTLE_ID.."|"..LOCAL_CHANNEL
    --modem.transmit(CONTROLER_CHANNEL,LOCAL_CHANNEL,msg)
    while true do
        local startTime = os.clock()
        
        -- Handle events with timeout
        event.handleCCEvents(0.5)
        
        --Perform periodic tasks every 10 seconds
        if os.clock() % 20 < 0.1 then
            print("serialising databases")
            local storage = getActiveStorage()
            storage.ledger_internal:save()
            storage.ledger_internal:load() 
        end
    end
end

local function protectedRun()
    local success, err = pcall(mainloop)
    if not success then
        term.clear()
        print("CRITICAL ERROR:")
        print(err)
    end
end
 
-- Start the system
protectedRun()
modem.close(LOCAL_CHANNEL)
print("ENDED GRACEFULLY")
